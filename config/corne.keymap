/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&mt {
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    flavor = "tap-preferred";
    hold-trigger-key-positions = <13 14 15 16 19 20 21 22>;
    hold-trigger-on-release;
    require-prior-idle-ms = <150>;
};

&mmv {
    trigger-period-ms = <16>;
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE  &kp Q       &kp W        &kp E       &kp R         &kp T        &kp Y      &kp U        &kp I       &kp O        &kp P          &kp LEFT_BRACKET
&kp TAB     &mt LGUI A  &mt LCTRL S  &mt LALT D  &mt LSHIFT F  &kp G        &kp H      &mt RSHFT J  &mt RALT K  &mt RCTRL L  &mt RGUI SEMI  &kp SQT
&kp NUBS    &kp Z       &kp X        &kp C       &kp V         &kp B        &kp N      &kp M        &kp COMMA   &kp DOT      &kp FSLH       &kp BACKSPACE
                                     &kp DELETE  &mo 1         &kp SPACE    &kp ENTER  &mo 2        &kp CAPS
            >;
        };

        layer_1 {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)      &kp LS(AT)        &kp LS(POUND)     &kp LS(DLLR)  &kp LS(PRCNT)           &kp LS(CARET)  &kp LS(AMPS)              &kp LS(STAR)   &kp LPAR       &kp RPAR         &kp LS(MINUS)
&kp GRAVE      &mt LGUI N1       &mt LCTRL N2      &mt LALT N3       &mt LSHFT N4  &kp N5                  &kp N6         &mt RSHIFT N7             &mt RALT N8    &mt RCTRL N9   &mt RGUI N0      &kp MINUS
&none          &kp RA(NUMBER_1)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(SQT)   &kp RA(LEFT_BRACKET)    &kp RA(RBKT)   &kp RA(NON_US_BACKSLASH)  &kp RA(MINUS)  &kp RA(EQUAL)  &kp LS(INT_YEN)  &kp RBRC
                                                   &none             &trans        &none                   &none          &trans                    &none
            >;
        };

        layer_2 {
            bindings = <
&kp F1          &kp F2             &kp F3         &kp F4            &kp F5                &kp F6        &kp F7        &kp F8           &kp F9        &kp F10          &kp F11           &kp F12
&none           &mt LGUI C_VOL_UP  &mt LCTRL END  &mt LALT PAGE_UP  &mt LSHIFT PAGE_DOWN  &kp HOME      &kp LEFT      &mt RSHIFT DOWN  &mt RALT UP   &mt RCTRL RIGHT  &mt RGUI C_MUTE   &none
&bt BT_CLR_ALL  &kp C_VOL_DN       &none          &bt BT_CLR        &bt BT_NXT            &bt BT_PRV    &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3     &kp C_PLAY_PAUSE  &bt BT_SEL 4
                                                  &none             &trans                &none         &none         &trans           &none
            >;
        };

        layer_3 {
            bindings = <
&kp ESC  &bootloader      &mkp MB2        &mmv MOVE_UP     &mkp MB1         &kp PRINTSCREEN    &mkp MB3         &kp KP_N7         &kp KP_N8        &kp KP_N9        &kp KP_NUMLOCK  &kp LC(LA(DELETE))
&none    &msc SCRL_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &msc SCRL_UP       &mkp MB1         &mt RSHIFT KP_N4  &mt RALT KP_N5   &mt RCTRL KP_N6  &mt RGUI N0     &rgb_ug RGB_TOG
&none    &msc SCRL_LEFT   &mkp MB4        &mkp MB3         &mkp MB5         &msc SCRL_DOWN     &mkp MB2         &kp KP_N1         &kp KP_N2        &kp KP_N3        &kp KP_DOT      &none
                                          &rgb_ug RGB_BRI  &trans           &rgb_ug RGB_EFF    &rgb_ug RGB_EFR  &trans            &rgb_ug RGB_BRD
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        mouse {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
