/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    flavor = "tap-preferred";
    hold-trigger-key-positions = <13 14 15 16 19 20 21 22>;
    hold-trigger-on-release;
    require-prior-idle-ms = <150>;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q       &kp W        &kp E       &kp R         &kp T        &kp Y      &kp U        &kp I       &kp O        &kp P          &kp BSPC
&kp TAB     &mt LGUI A  &mt LCTRL S  &mt LALT D  &mt LSHIFT F  &kp G        &kp H      &mt RSHFT J  &mt RALT K  &mt RCTRL L  &mt RGUI SEMI  &kp SQT
&kp EQUAL   &kp Z       &kp X        &kp C       &kp V         &kp B        &kp N      &kp M        &kp COMMA   &kp DOT      &kp FSLH       &kp MINUS
                                     &kp DELETE  &mo 1         &kp SPACE    &kp ENTER  &mo 2        &kp CAPS
            >;
        };

        layer_1 {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PIPE)
&kp GRAVE      &mt LGUI N1   &mt LCTRL N2  &mt LALT N3    &mt LSHFT N4  &kp N5           &kp N6         &mt RSHIFT N7  &mt RALT N8   &mt RCTRL N9  &mt RGUI N0   &kp BSLH
&kp EQUAL      &none         &kp BSPC      &none          &kp LBKT      &kp LS(LPAR)     &kp LS(RPAR)   &kp RBKT       &kp COMMA     &kp DOT       &none         &kp MINUS
                                           &none          &trans        &none            &kp SPACE      &trans         &none
            >;
        };

        layer_2 {
            bindings = <
&kp F1  &kp F2             &kp F3         &kp F4            &kp F5                &kp F6        &kp F7        &kp F8           &kp F9        &kp F10          &kp F11           &kp F12
&none   &mt LGUI C_VOL_UP  &mt LCTRL END  &mt LALT PAGE_UP  &mt LSHIFT PAGE_DOWN  &kp HOME      &kp LEFT      &mt RSHIFT DOWN  &mt RALT UP   &mt RCTRL RIGHT  &mt RGUI C_MUTE   &none
&none   &kp C_VOL_DN       &none          &bt BT_PRV        &bt BT_NXT            &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3     &kp C_PLAY_PAUSE  &none
                                          &none             &trans                &none         &none         &trans           &none
            >;
        };

        layer_3 {
            bindings = <
&kp ESC  &none            &mkp MB2        &mmv MOVE_UP     &mkp MB1         &none              &mkp MB3         &kp N7         &kp N8           &kp N9        &none        &kp LC(LA(DELETE))
&none    &msc SCRL_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &msc SCRL_UP       &mkp MB1         &mt RSHIFT N4  &mt RALT N5      &mt RCTRL N6  &mt RGUI N0  &rgb_ug RGB_TOG
&none    &msc SCRL_LEFT   &mkp MB4        &mkp MB3         &mkp MB5         &msc SCRL_DOWN     &mkp MB2         &kp N1         &kp N2           &kp N3        &none        &rgb_ug RGB_COLOR_HSB(56,78,47)
                                          &rgb_ug RGB_BRI  &trans           &rgb_ug RGB_EFF    &rgb_ug RGB_EFR  &trans         &rgb_ug RGB_BRD
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        mouse {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
